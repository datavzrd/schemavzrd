<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>schemavzrd</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous"></head>
<body>
<div class="container">
    <div class="row justify-content-center">
        <h1 style="text-align: center; font-weight: lighter; margin-bottom: 20px;">schema<b>vzrd</b></h1>
    </div>
    <div class="row mb-3">
        <div class="collapse" id="manual">
            <div class="card card-body">
                1. Upload one or multiple csv files<br>
                2. Use the process csv button to generate a basic datavzrd configuration file with the headers from the given csv files.<br>
                3. Customize the config to your needs with the displayed form.<br>
                4. Download the yaml file with the download config button.
            </div>
        </div>
    </div>
    <div class="row col-md-12 justify-content-center">
        <div class="col-2">
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#manual" aria-expanded="false" aria-controls="manual">
                Manual
            </button>
        </div>
        <div class="col-6">
            <input class="input form-control" type="file" id="fileInput" accept=".csv" multiple>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" id="configBtn">Process CSV</button>
        </div>
        <div class="col-2">
            <button class="btn btn-success" onclick="getData()">Download config</button>
        </div>
    </div>
    <div id="editor_holder" class="mt-3" style="width: 800px; height: calc(100vh - 100px); margin: 0 auto; overflow: auto;"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script><script src="https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.0.0/js-yaml.min.js"></script>
<script>
    document.getElementById('configBtn').addEventListener('click', function() {
        const element = document.getElementById('editor_holder');
        window['editor'] = new JSONEditor(element, {
            schema: {{ schema | safe }},
            theme: 'bootstrap5',
            disable_edit_json: true,
            display_required_only: true,
            startval: JSON.parse(document.getElementById('configBtn').dataset['json'])
        });
    });
    const j = {
        "datasets": {},
        "views": {}
    };
    document.getElementById('configBtn').dataset['json'] = JSON.stringify(j);
    function processFiles(files) {
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();

            reader.onload = function(event) {
                const base = JSON.parse(document.getElementById('configBtn').dataset['json']); // Create a deep copy of j
                const csvText = event.target.result;
                const lines = csvText.split('\n');
                if (lines.length > 0) {
                    const columnNames = lines[0].trim().split(',');
                    let name = file.name.split('.')[0];
                    base.datasets[name] = {
                        path: file.name
                    }
                    base.views[name] = {
                        dataset: name,
                        'render-table': {
                            columns: {}
                        }
                    };

                    for (const columnName of columnNames) {
                        base.views[name]['render-table'].columns[columnName] = {
                            'display-mode': 'normal'
                        };
                    }
                    document.getElementById('configBtn').dataset['json'] = JSON.stringify(base);
                } else {
                    console.error('CSV file is empty.');
                }
            };

            reader.onerror = function() {
                console.error('Error reading the file:', file.name);
            };

            reader.readAsText(file);
        }
    }

    document.getElementById('fileInput').addEventListener('change', function(event) {
        const files = event.target.files;
        if (files.length > 0) {
            processFiles(files);
        } else {
            console.error('Please select one or more files.');
        }
    });

    function downloadYaml(jsonObj) {
        const yamlString = jsyaml.dump(jsonObj);

        // Create blob
        const blob = new Blob([yamlString], { type: 'text/yaml' });

        // Create download link
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(blob);
        downloadLink.download = 'config.yaml';

        // Trigger download
        downloadLink.click();
    }

    // Function to get form data
    function getData() {
        var formData = editor.getValue();
        downloadYaml(formData);
    }
</script>
</body>
</html>
